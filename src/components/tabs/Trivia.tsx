import { useState } from 'react';
import { Shuffle, CheckCircle, XCircle, ArrowRight, RotateCcw, Target } from 'lucide-react';
import { useQuestions } from '../../hooks/useQuestions';
import { generateTriviaAnswers, type TriviaAnswer } from '../../services/triviaService';
import type { Question } from '../../hooks/useQuestions';

interface TriviaQuestion extends Question {
  answers: TriviaAnswer[];
}

// Trivia answers are now generated by the trivia service

const Trivia = () => {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [triviaQuestions, setTriviaQuestions] = useState<TriviaQuestion[]>([]);
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [showExplanation, setShowExplanation] = useState(false);
  const [score, setScore] = useState(0);
  const [questionsAnswered, setQuestionsAnswered] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [gameStarted, setGameStarted] = useState(false);
  const [selectedDifficulty, setSelectedDifficulty] = useState<'All' | 'Easy' | 'Medium' | 'Hard'>('All');
  const [scoreHistory, setScoreHistory] = useState<{ correct: boolean; difficulty: string; time: number }[]>([]);

  // Load questions from all categories
  const { data: sqlBasics, loading: loadingSqlBasics } = useQuestions('sql-basics');
  const { data: sqlAdvanced, loading: loadingSqlAdvanced } = useQuestions('sql-advanced');
  const { data: pythonBasics, loading: loadingPythonBasics } = useQuestions('pythonBasics');
  const { data: pythonAdvanced, loading: loadingPythonAdvanced } = useQuestions('pythonAdvanced');

  const isLoadingData = loadingSqlBasics || loadingSqlAdvanced || loadingPythonBasics || loadingPythonAdvanced;

  // Shuffle array utility
  const shuffleArray = <T,>(array: T[]): T[] => {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  };

  // Initialize trivia questions
  const initializeTrivia = async () => {
    if (isLoadingData) return;

    setIsLoading(true);
    try {
      // Combine all questions from different categories
      const allQuestions: Question[] = [
        ...(sqlBasics || []),
        ...(sqlAdvanced || []),
        ...(pythonBasics || []),
        ...(pythonAdvanced || [])
      ];

      if (allQuestions.length === 0) {
        console.warn('No questions loaded');
        return;
      }

      // Filter questions by selected difficulty
      const filteredQuestions = selectedDifficulty === 'All' 
        ? allQuestions 
        : allQuestions.filter(q => q.difficulty === selectedDifficulty);

      // Select 20 random questions
      const selectedQuestions = shuffleArray(filteredQuestions).slice(0, 20);

      // Generate trivia answers for each question
      const triviaQuestionsWithAnswers: TriviaQuestion[] = await Promise.all(
        selectedQuestions.map(async (question) => {
          const answers = await generateTriviaAnswers(question, allQuestions);
          return {
            ...question,
            answers: shuffleArray(answers) // Shuffle answer order
          } as TriviaQuestion;
        })
      );

      setTriviaQuestions(triviaQuestionsWithAnswers);
      setCurrentQuestionIndex(0);
      setScore(0);
      setQuestionsAnswered(0);
      setSelectedAnswer(null);
      setShowExplanation(false);
      setGameStarted(true);
    } catch (error) {
      console.error('Error initializing trivia:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Handle answer selection
  const handleAnswerSelect = (answerId: string) => {
    if (selectedAnswer || showExplanation) return;
    
    setSelectedAnswer(answerId);
    const currentQuestion = triviaQuestions[currentQuestionIndex];
    const selectedAnswerObj = currentQuestion.answers.find(a => a.id === answerId);
    
    if (selectedAnswerObj?.isCorrect) {
      setScore(score + 1);
      setScoreHistory([...scoreHistory, { correct: true, difficulty: currentQuestion.difficulty || 'Medium', time: currentQuestion.timeEstimate || 5 }]);
    } else {
      setScoreHistory([...scoreHistory, { correct: false, difficulty: currentQuestion.difficulty || 'Medium', time: currentQuestion.timeEstimate || 5 }]);
    }
    
    setQuestionsAnswered(questionsAnswered + 1);
    
    // Show explanation after a brief delay
    setTimeout(() => {
      setShowExplanation(true);
    }, 500);
  };

  // Handle next question
  const handleNextQuestion = () => {
    if (currentQuestionIndex < triviaQuestions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setSelectedAnswer(null);
      setShowExplanation(false);
    }
  };

  // Reset game
  const resetGame = () => {
    setGameStarted(false);
    setTriviaQuestions([]);
    setCurrentQuestionIndex(0);
    setScore(0);
    setQuestionsAnswered(0);
    setSelectedAnswer(null);
    setShowExplanation(false);
    setSelectedDifficulty('All');
    setScoreHistory([]);
  };

  const currentQuestion = triviaQuestions[currentQuestionIndex];
  const isGameComplete = currentQuestionIndex === triviaQuestions.length - 1 && showExplanation;
  const scorePercentage = questionsAnswered > 0 ? Math.round((score / questionsAnswered) * 100) : 0;

  if (isLoadingData) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500 mx-auto"></div>
          <p className="mt-4 text-gray-600 dark:text-gray-400">Loading questions...</p>
        </div>
      </div>
    );
  }

  if (!gameStarted) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 p-4">
        <div className="max-w-2xl mx-auto pt-8">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8 text-center">
            <Target className="mx-auto h-16 w-16 text-blue-500 mb-6" />
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
              Interactive Trivia Challenge
            </h1>
            <p className="text-gray-600 dark:text-gray-400 mb-6 text-lg">
              Test your knowledge with 20 random questions from SQL and Python topics.
              Each question has 3 multiple choice answers - only one is correct!
            </p>
            <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 mb-6">
              <h3 className="font-semibold text-blue-900 dark:text-blue-300 mb-2">What you'll get:</h3>
              <ul className="text-blue-800 dark:text-blue-400 text-sm space-y-1">
                <li>• 20 questions from SQL Basics, SQL Advanced, Python Basics & Python Advanced</li>
                <li>• Multiple choice format with realistic distractors</li>
                <li>• Detailed explanations after each answer</li>
                <li>• Progress tracking and final score</li>
              </ul>
            </div>

            {/* Difficulty Selection */}
            <div className="mb-6">
              <label className="block text-left mb-2 text-sm font-medium text-gray-700 dark:text-gray-300">
                Select Difficulty:
              </label>
              <div className="flex flex-wrap gap-2 justify-center">
                {['All', 'Easy', 'Medium', 'Hard'].map((difficulty) => (
                  <button
                    key={difficulty}
                    onClick={() => setSelectedDifficulty(difficulty as 'All' | 'Easy' | 'Medium' | 'Hard')}
                    className={`px-4 py-2 rounded-lg font-semibold transition-all duration-200 flex items-center justify-center 
                      ${selectedDifficulty === difficulty ? 'bg-blue-500 text-white shadow-md' : 'bg-gray-200 dark:bg-gray-700 text-gray-900 dark:text-white hover:bg-blue-50 dark:hover:bg-blue-900/20'}`}
                  >
                    {difficulty}
                  </button>
                ))}
              </div>
            </div>

            <button
              onClick={initializeTrivia}
              disabled={isLoading}
              className="bg-blue-500 hover:bg-blue-600 disabled:bg-blue-300 text-white font-semibold py-3 px-8 rounded-lg transition-colors duration-200 flex items-center mx-auto"
            >
              {isLoading ? (
                <>
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                  Preparing Questions...
                </>
              ) : (
                <>
                  <Shuffle className="mr-2 h-5 w-5" />
                  Start Trivia Challenge
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (isGameComplete) {
    // Calculate performance analytics
    const difficultyBreakdown = scoreHistory.reduce((acc, item) => {
      if (!acc[item.difficulty]) {
        acc[item.difficulty] = { correct: 0, total: 0 };
      }
      acc[item.difficulty].total++;
      if (item.correct) acc[item.difficulty].correct++;
      return acc;
    }, {} as Record<string, { correct: number; total: number }>);

    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 p-4">
        <div className="max-w-2xl mx-auto pt-8">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8 text-center">
            <div className="mb-6">
              {scorePercentage >= 80 ? (
                <CheckCircle className="mx-auto h-16 w-16 text-green-500" />
              ) : scorePercentage >= 60 ? (
                <Target className="mx-auto h-16 w-16 text-yellow-500" />
              ) : (
                <XCircle className="mx-auto h-16 w-16 text-red-500" />
              )}
            </div>
            
            <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
              Challenge Complete!
            </h2>
            
            <div className="text-6xl font-bold mb-4">
              <span className={`${
                scorePercentage >= 80 ? 'text-green-500' :
                scorePercentage >= 60 ? 'text-yellow-500' : 'text-red-500'
              }`}>
                {scorePercentage}%
              </span>
            </div>
            
            <p className="text-xl text-gray-600 dark:text-gray-400 mb-6">
              You got {score} out of {questionsAnswered} questions correct
            </p>

            {/* Difficulty Performance Breakdown */}
            {Object.keys(difficultyBreakdown).length > 1 && (
              <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 mb-6">
                <h3 className="font-semibold text-blue-900 dark:text-blue-300 mb-3">Performance by Difficulty:</h3>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                  {Object.entries(difficultyBreakdown).map(([difficulty, stats]) => (
                    <div key={difficulty} className="text-center">
                      <div className="text-lg font-bold text-blue-800 dark:text-blue-400">
                        {Math.round((stats.correct / stats.total) * 100)}%
                      </div>
                      <div className="text-sm text-blue-600 dark:text-blue-500">{difficulty}</div>
                      <div className="text-xs text-blue-500 dark:text-blue-400">
                        {stats.correct}/{stats.total}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 mb-6">
              <h3 className="font-semibold text-gray-900 dark:text-white mb-2">Performance Rating:</h3>
              <p className="text-gray-600 dark:text-gray-400">
                {scorePercentage >= 80 ? "🎉 Excellent! You're well prepared for technical interviews." :
                 scorePercentage >= 60 ? "👍 Good job! Review the areas you missed and try again." :
                 "📚 Keep studying! Focus on the explanations and practice more."}
              </p>
            </div>
            
            <button
              onClick={resetGame}
              className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 px-8 rounded-lg transition-colors duration-200 flex items-center mx-auto"
            >
              <RotateCcw className="mr-2 h-5 w-5" />
              Try Another Challenge
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (!currentQuestion) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
        <p className="text-gray-600 dark:text-gray-400">No questions available</p>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 p-4">
      <div className="max-w-3xl mx-auto pt-4">
        {/* Progress Bar */}
        <div className="mb-6">
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
              Question {currentQuestionIndex + 1} of {triviaQuestions.length}
            </span>
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
              Score: {score}/{questionsAnswered} ({scorePercentage}%)
            </span>
          </div>
          <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
            <div 
              className="bg-blue-500 h-2 rounded-full transition-all duration-300"
              style={{ width: `${((currentQuestionIndex + 1) / triviaQuestions.length) * 100}%` }}
            ></div>
          </div>
        </div>

        {/* Question Card */}
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-6">
          <div className="mb-4">
            <span className="inline-block bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs px-2 py-1 rounded-full font-medium mb-2">
              {currentQuestion.difficulty || 'Medium'} • {currentQuestion.timeEstimate || 5} min
            </span>
            <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
              {currentQuestion.question}
            </h2>
          </div>

          {/* Answer Options */}
          <div className="space-y-3">
            {currentQuestion.answers.map((answer) => {
              const isSelected = selectedAnswer === answer.id;
              const isCorrect = answer.isCorrect;
              const showResult = selectedAnswer !== null;
              
              let buttonClass = "w-full p-4 text-left rounded-lg border-2 transition-all duration-200 ";
              
              if (showResult) {
                if (isSelected && isCorrect) {
                  buttonClass += "border-green-500 bg-green-50 dark:bg-green-900/20 text-green-800 dark:text-green-300";
                } else if (isSelected && !isCorrect) {
                  buttonClass += "border-red-500 bg-red-50 dark:bg-red-900/20 text-red-800 dark:text-red-300";
                } else if (isCorrect) {
                  buttonClass += "border-green-500 bg-green-50 dark:bg-green-900/20 text-green-800 dark:text-green-300";
                } else {
                  buttonClass += "border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-gray-700 text-gray-600 dark:text-gray-400";
                }
              } else {
                buttonClass += "border-gray-200 dark:border-gray-600 hover:border-blue-300 dark:hover:border-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/20 text-gray-900 dark:text-white";
              }

              return (
                <button
                  key={answer.id}
                  onClick={() => handleAnswerSelect(answer.id)}
                  disabled={selectedAnswer !== null}
                  className={buttonClass}
                >
                  <div className="flex items-center justify-between">
                    <span className="flex-1">{answer.text}</span>
                    {showResult && (
                      <span className="ml-2">
                        {isCorrect ? (
                          <CheckCircle className="h-5 w-5 text-green-500" />
                        ) : isSelected ? (
                          <XCircle className="h-5 w-5 text-red-500" />
                        ) : null}
                      </span>
                    )}
                  </div>
                </button>
              );
            })}
          </div>
        </div>

        {/* Explanation */}
        {showExplanation && (
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-6">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-3">
              Explanation
            </h3>
            <div className="prose dark:prose-invert max-w-none">
              <p className="text-gray-700 dark:text-gray-300 mb-4">
                {currentQuestion.answer}
              </p>
              
              {currentQuestion.pseudoCode && (
                <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-4 mb-4">
                  <h4 className="text-sm font-semibold text-gray-600 dark:text-gray-400 mb-2">
                    Example Code:
                  </h4>
                  <pre className="text-sm text-gray-800 dark:text-gray-200 whitespace-pre-wrap">
                    {currentQuestion.pseudoCode}
                  </pre>
                </div>
              )}
              
              {currentQuestion.aiApproach && (
                <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4">
                  <h4 className="text-sm font-semibold text-blue-800 dark:text-blue-300 mb-2">
                    💡 Key Insight:
                  </h4>
                  <p className="text-blue-700 dark:text-blue-400 text-sm">
                    {currentQuestion.aiApproach}
                  </p>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Next Button */}
        {showExplanation && (
          <div className="text-center">
            {currentQuestionIndex < triviaQuestions.length - 1 ? (
              <button
                onClick={handleNextQuestion}
                className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-3 px-8 rounded-lg transition-colors duration-200 flex items-center mx-auto"
              >
                Next Question
                <ArrowRight className="ml-2 h-5 w-5" />
              </button>
            ) : (
              <p className="text-gray-600 dark:text-gray-400">
                Challenge complete! Check your final score above.
              </p>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default Trivia;
